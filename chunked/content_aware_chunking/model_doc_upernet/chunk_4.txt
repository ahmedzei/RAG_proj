It can be used with any vision backbone, like so:

from transformers import SwinConfig, UperNetConfig, UperNetForSemanticSegmentation
backbone_config = SwinConfig(out_features=["stage1", "stage2", "stage3", "stage4"])
config = UperNetConfig(backbone_config=backbone_config)
model = UperNetForSemanticSegmentation(config)

To use another vision backbone, like ConvNeXt, simply instantiate the model with the appropriate backbone:

from transformers import ConvNextConfig, UperNetConfig, UperNetForSemanticSegmentation
backbone_config = ConvNextConfig(out_features=["stage1", "stage2", "stage3", "stage4"])
config = UperNetConfig(backbone_config=backbone_config)
model = UperNetForSemanticSegmentation(config)

Note that this will randomly initialize all the weights of the model.
Resources
A list of official Hugging Face and community (indicated by ðŸŒŽ) resources to help you get started with UPerNet.

Demo notebooks for UPerNet can be found here.
[UperNetForSemanticSegmentation] is supported by this example script and notebook.
See also: Semantic segmentation task guide

If you're interested in submitting a resource to be included here, please feel free to open a Pull Request and we'll review it! The resource should ideally demonstrate something new instead of duplicating an existing resource.
UperNetConfig
[[autodoc]] UperNetConfig
UperNetForSemanticSegmentation
[[autodoc]] UperNetForSemanticSegmentation
    - forward.