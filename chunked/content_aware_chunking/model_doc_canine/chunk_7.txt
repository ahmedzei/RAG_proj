The
  details for this can be found in the paper.

Model checkpoints:

google/canine-c: Pre-trained with autoregressive character loss,
    12-layer, 768-hidden, 12-heads, 121M parameters (size ~500 MB).
google/canine-s: Pre-trained with subword loss, 12-layer,
    768-hidden, 12-heads, 121M parameters (size ~500 MB).

Usage example
CANINE works on raw characters, so it can be used without a tokenizer:
thon

from transformers import CanineModel
import torch
model = CanineModel.from_pretrained("google/canine-c")  # model pre-trained with autoregressive character loss
text = "hello world"
use Python's built-in ord() function to turn each character into its unicode code point id
input_ids = torch.tensor([[ord(char) for char in text]])
outputs = model(input_ids)  # forward pass
pooled_output = outputs.pooler_output
sequence_output = outputs.last_hidden_state

For batched inference and training, it is however recommended to make use of the tokenizer (to pad/truncate all
sequences to the same length):
thon

from transformers import CanineTokenizer, CanineModel
model = CanineModel.from_pretrained("google/canine-c")
tokenizer = CanineTokenizer.from_pretrained("google/canine-c")
inputs = ["Life is like a box of chocolates.", "You never know what you gonna get."]
encoding = tokenizer(inputs, padding="longest", truncation=True, return_tensors="pt")
outputs = model(**encoding)  # forward pass
pooled_output = outputs.pooler_output
sequence_output = outputs.last_hidden_state

Resources

Text classification task guide
Token classification task guide
Question answering task guide
Multiple choice task guide

CanineConfig
[[autodoc]] CanineConfig
CanineTokenizer
[[autodoc]] CanineTokenizer
    - build_inputs_with_special_tokens
    - get_special_tokens_mask
    - create_token_type_ids_from_sequences
CANINE specific outputs
[[autodoc]] models.canine.modeling_canine.CanineModelOutputWithPooling
CanineModel
[[autodoc]] CanineModel
    - forward
CanineForSequenceClassification
[[autodoc]] CanineForSequenceClassification
    - forward
CanineForMultipleChoice
[[autodoc]] CanineForMultipleChoice
    - forward
CanineForTokenClassification
[[autodoc]] CanineForTokenClassification
    - forward
CanineForQuestionAnswering
[[autodoc]] CanineForQuestionAnswering
    - forward.