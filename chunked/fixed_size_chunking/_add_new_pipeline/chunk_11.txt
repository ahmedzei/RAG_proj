cond_text"] = kwargs["second_text"]
        return preprocess_kwargs, {}, {}
def preprocess(self, text, second_text=None):
    return self.tokenizer(text, text_pair=second_text, return_tensors=self.framework)

def _forward(self, model_inputs):
    return self.model(**model_inputs)

def postprocess(self, model_outputs):
    logits = model_outputs.logits[0].numpy()
    probabilities = softmax(logits)

    best_class = np.argmax(probabilities)
    label = self.model.config.id2label[best_class]
    score = prob